<% content_for :additionals do %> 
  <%= stylesheet_link_tag 'xterm/dist/xterm' %>
  <%= javascript_include_tag 'jquery-3.2.1.min' %>
  <%= javascript_include_tag 'jquery-ui.min' %>
  <%= javascript_include_tag 'xterm/dist/xterm' %>
  <%= javascript_include_tag 'xterm/dist/addons/fit/fit' %>
  <%= javascript_include_tag 'xterm/dist/addons/attach/attach' %>
<% end %>

<div id="title" class="u-max-full-width">
  <h3 class="title-header">
    <%= link_to image_tag("logo.png", :alt => "Logo", :class => "logo"), lxd_index_path -%>
    <%= link_to "LXWeb", lxd_index_path, :class => "web-title" -%> 
  </h3>
  <span class="subtitle-header">Web Interface for LXD Containers</span>
  <%= link_to "Logout", ip_logout_path, :method => :put, :class => "u-pull-right logout" %>
</div>

<div class="container u-max-full-width">
  <h5 class="current-page main-header">Container Info</h5>
  <div id="accordion">
    <p class="accordion-title">Detail</p>
    <div class="detail">
      <table width="90%">
        <tbody>
          <tr>
            <th>Name</th>
            <td colspan="2"><%= @containerDetail[:name] %></td>
          </tr>
          <tr>
            <th>Status</th>
            <td colspan="2"><%= @containerDetail[:status] %></td>
          </tr>
          <tr>
            <th>Architecture</th>
            <td colspan="2"><%= @containerDetail[:architecture] %></td>
          </tr>
          <tr>
            <th rowspan="7">Image</th>
            <tr colspan="2">
              <th>Architecture</th>
              <td><%= @containerDetail[:config][:"image.architecture"] %></td>
            </tr>
            <tr colspan="2">
              <th>Label</th>
              <td><%= @containerDetail[:config][:"image.label"] %></td>
            </tr>
            <tr colspan="2">
              <th>OS</th>
              <td><%= @containerDetail[:config][:"image.os"] %></td>
            </tr>
            <tr colspan="2">
              <th>Release</th>
              <td><%= @containerDetail[:config][:"image.release"] %></td>
            </tr>
            <tr colspan="2">
              <th>Serial</th>
              <td><%= @containerDetail[:config][:"image.serial"] %></td>
            </tr>
            <tr colspan="2">
              <th>Version</th>
              <td><%= @containerDetail[:config][:"image.version"] %></td>
            </tr>
          </tr>
        </tbody>
      </table>
    </div>

    <% if @containerDetail[:status] == "Running" %>
      <p class="accordion-title">Console</p>
      <div id="terminal-container"></div>
    <% end %>

  </div>
</div>

<script>
  var term,
  protocol,
  socketURL,
  socket,
  pid,
  charWidth,
  charHeight;

  var terminalContainer = document.getElementById('terminal-container');

  function setTerminalSize () {
  var cols = parseInt(colsElement.value, 10),
    rows = parseInt(rowsElement.value, 10),
    width = (cols * charWidth).toString() + 'px',
    height = (rows * charHeight).toString() + 'px';

  terminalContainer.style.width = width;
  terminalContainer.style.height = height;
  term.resize(cols, rows);
  }

  colsElement.addEventListener('change', setTerminalSize);
  rowsElement.addEventListener('change', setTerminalSize);

  actionElements.findNext.addEventListener('keypress', function (e) {
  if (e.key === "Enter") {
  e.preventDefault();
  term.findNext(actionElements.findNext.value);
  }
  });
  actionElements.findPrevious.addEventListener('keypress', function (e) {
  if (e.key === "Enter") {
  e.preventDefault();
  term.findPrevious(actionElements.findPrevious.value);
  }
  });

  optionElements.cursorBlink.addEventListener('change', function () {
  term.setOption('cursorBlink', optionElements.cursorBlink.checked);
  });
  optionElements.cursorStyle.addEventListener('change', function () {
  term.setOption('cursorStyle', optionElements.cursorStyle.value);
  });
  optionElements.scrollback.addEventListener('change', function () {
  term.setOption('scrollback', parseInt(optionElements.scrollback.value, 10));
  });
  optionElements.tabstopwidth.addEventListener('change', function () {
  term.setOption('tabStopWidth', parseInt(optionElements.tabstopwidth.value, 10));
  });

  createTerminal();

  function createTerminal() {
  // Clean terminal
  while (terminalContainer.children.length) {
  terminalContainer.removeChild(terminalContainer.children[0]);
  }
  term = new Terminal({
  cursorBlink: optionElements.cursorBlink.checked,
  scrollback: parseInt(optionElements.scrollback.value, 10),
  tabStopWidth: parseInt(optionElements.tabstopwidth.value, 10)
  });
  term.on('resize', function (size) {
  if (!pid) {
    return;
  }
  var cols = size.cols,
      rows = size.rows,
      url = '/terminals/' + pid + '/size?cols=' + cols + '&rows=' + rows;

  fetch(url, {method: 'POST'});
  });
  protocol = (location.protocol === 'https:') ? 'wss://' : 'ws://';
  socketURL = protocol + location.hostname + ((location.port) ? (':' + location.port) : '') + '/terminals/';

  term.open(terminalContainer);
  term.fit();

  var initialGeometry = term.proposeGeometry(),
    cols = initialGeometry.cols,
    rows = initialGeometry.rows;

  colsElement.value = cols;
  rowsElement.value = rows;

  fetch('/terminals?cols=' + cols + '&rows=' + rows, {method: 'POST'}).then(function (res) {

  charWidth = Math.ceil(term.element.offsetWidth / cols);
  charHeight = Math.ceil(term.element.offsetHeight / rows);

  res.text().then(function (pid) {
    window.pid = pid;
    socketURL += pid;
    socket = new WebSocket(socketURL);
    socket.onopen = runRealTerminal;
    socket.onclose = runFakeTerminal;
    socket.onerror = runFakeTerminal;
  });
  });
  }

  function runRealTerminal() {
  term.attach(socket);
  term._initialized = true;
  }

  function runFakeTerminal() {
  if (term._initialized) {
  return;
  }

  term._initialized = true;

  var shellprompt = '$ ';

  term.prompt = function () {
  term.write('\r\n' + shellprompt);
  };

  term.on('key', function (key, ev) {
  var printable = (
    !ev.altKey && !ev.altGraphKey && !ev.ctrlKey && !ev.metaKey
  );

  if (ev.keyCode == 13) {
    term.prompt();
  } else if (ev.keyCode == 8) {
  // Do not delete the prompt
    if (term.x > 2) {
      term.write('\b \b');
    }
  } else if (printable) {
    term.write(key);
  }
  });

  term.on('paste', function (data, ev) {
  term.write(data);
  });
  }

</script>
